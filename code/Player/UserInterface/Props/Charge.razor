@using Sandbox;
@using Sandbox.UI;
@inherits Panel
@namespace Physbox

@if (Player is null || Player.HeldGameObject is null || !Player.CanPickupObjects) return;

<root>
	<div class="container">
		@if (Player.Throws < 4 )
		{
			<div style="padding-bottom: 50px; gap: 20px;">
				<div class="info_text">
					<img src=@Input.GetGlyph("attack1", InputGlyphSize.Small, false).ResourcePath />
					Throw
				</div>
				<div class="info_text">
					<img src=@Input.GetGlyph("drop", InputGlyphSize.Small, false).ResourcePath />
					Drop
				</div>
				<div class="info_text">
					<img src=@Input.GetGlyph("pan_left", InputGlyphSize.Small, false).ResourcePath />
					Rotate Left
				</div>
				<div class="info_text">
					<img src=@Input.GetGlyph("pan_right", InputGlyphSize.Small, false).ResourcePath />
					Rotate Right
				</div>
			</div>
		}
		<div class="background container animation" style="width: 220px; margin: auto;">
			<div style="height:45px">
				<rect style="position:absolute; height: 45px; width: 180px; background-color: black"></rect>
				<rect class="chargeBarTexture" style="position:absolute; height: 45px;
					width: @( 1.8 * float.Round( PercentageCharged * 100 ) );
					background-color:@Player.ForceColorGradient.Evaluate(PercentageCharged).Hex;">
				</rect>
			</div>
		</div>
	</div>
		
</root>

@code
{
	PlayerComponent Player => PlayerComponent.LocalPlayer;
	PropLifeComponent PropLife => Player?.HeldGameObject?.GetComponent<PropLifeComponent>();
	PropDefinitionResource PropDef => PropLife?.Definition;

	public float PercentageCharged => Player.BuiltUpForce / Player.MaxForce;

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine(PercentageCharged);
}
